package com.rmd.personal.projecteuler;

import java.util.Map;

public class Problem12 implements Problem {

    private static final int DEFAULT_NUMBER_OF_DIVISORS = 500;

    private int numberOfDivisors;

    public Problem12() {
        this.setNumberOfDivisors(DEFAULT_NUMBER_OF_DIVISORS);
    }

    public int getNumberOfDivisors() {
        return numberOfDivisors;
    }

    public void setNumberOfDivisors(int numberOfDivisors) {
        this.numberOfDivisors = numberOfDivisors;
    }

    @Override
    public String getDescription() {
        return "The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle "
                + "number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:\n\n"
                + "1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...\n\n"
                + "Let us list the factors of the first seven triangle numbers:\n\n"
                + " 1: 1\n"
                + " 3: 1,3\n"
                + " 6: 1,2,3,6\n"
                + "10: 1,2,5,10\n"
                + "15: 1,3,5,15\n"
                + "21: 1,3,7,21\n"
                + "28: 1,2,4,7,14,28\n"
                + "We can see that 28 is the first triangle number to have over five divisors.\n\n"
                + "What is the value of the first triangle number to have over five hundred divisors?";
    }

    @Override
    public String run() {
        // Start at 3 because 1 isn't a prime number
        final long defaultStartingValue = 3L;
        long currentValue = defaultStartingValue;
        long currentSum = currentValue;

        int factorCount = 1;
        while (factorCount <= this.getNumberOfDivisors()) {
            factorCount = 1;
            currentValue++;
            currentSum = Common.sum(currentValue);
            Map<Long, Integer> primePowers = Common.findPrimeFactorTreeForValue(currentSum);

            for (long prime : primePowers.keySet()) {
                factorCount *= (primePowers.get(prime) + 1);
            }
        }
        return String.valueOf(currentSum);
    }
}
